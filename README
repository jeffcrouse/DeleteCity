Delete City
By Jeff Crouse
jefftimesten at gmail dot com
http://www.jeffcrouse.info
 
This software is licensed under the GNU-GPL version 3 or later.

Delete City is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.

Delete City is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.


INTRODUCTION
=========================

WARNING: DeleteCity will eventually be a Wordpress plugin, but it is in progress.  For now it is a bunch of command line PHP scripts that you have to run manually.  See "IMPORTANT FOLDERS AND FILES" for more info.

Delete City uses the ridiculous storage allotment of web hosting services like Dreamhost to cache large amounts of user generated content from sites like YouTube, Flickr, Facebook, etc. and then monitors to see if any of this content is subsequently taken down. When it finds removed content, it automatically posts the content to your WordPress blog. The nature of the content can be customized by the user by site, keyword, and other criteria. Devious? Maybe. But also one step in the fight against censorship.

more info:
http://www.jeffcrouse.info/projects/delete-city/


REQUIREMENTS
=========================

PHP >= 5 (may be compatible with PHP4, according to http://phpduck.com/minimum-php-version-script/)
Python >= 2.5


IMPORTANT FOLDERS AND FILES
=========================

sources
This file contains feed URLS (one per line) that will be used to find the videos to download.  Check out this page for more information about forming feed URLS: http://code.google.com/apis/youtube/2.0/reference.html#Searching_for_videos

runcache.php 
This script will download videos into the $cache_dir.  eg: ./runcache.php
eg: ./runcache.php

check.php
This script will check all of the videos that you have downloaded to see if any of them have been taken down. It will mark them as 'removed' if they have been taken down.  It will also delete any videos older than $max_age.
eg: ./check.php

list.php
This will list all of the videos in your cache.  you can also call it with --removed to just see the videos that have been taken down.
eg: ./list.php --removed

config.php
Some configuration options.  Most of them are commented and should be pretty self explainatory.  


OTHER FILES
========================

youtube-dl
This is a 3rd party script for downloading YouTube videos. You probably shouldn't use this directly - it is called from the other scripts.  You can find out more about it here:  http://rg3.github.com/youtube-dl/

NOTE:  If you are getting this from Github, make sure to properly initialize this submodule


TO DO
=========================
1. add proxy.conf -- a list of proxies to use randomly IF youtube-dl starts returning errors

2. Testing if video had been removed: testing for presence of <?xml in response probably isn't good enough.  Here are some removed videos to test with.
http://www.youtube.com/watch?v=eouvTRd6szQ 				account terminated
http://www.youtube.com/watch?v=PgEo_7rMH0Q				account terminated
http://www.youtube.com/watch?v=JdGJxI6LrX4				removed by user
http://www.youtube.com/watch?v=vQsFI4Wp6kI				removed by user

3. Make a schedule.php, or something to deal with scheduling the scripts to run automatically.

4. Have a reverse lookup that will loop through all of the videos in the cache dir, get the info from the YT API and put it in the database.  For orphaned videos.

5. Save video description, and other attributed of the video from the feed.

6. Option to automatically email the video author to ask why the video was taken down :)

7. in runcache.php, Gather all URLs before downloading so that you can provide an accurate progress meter.